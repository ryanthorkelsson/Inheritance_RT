Index: src/Ex3_MusicFestival/Ex3_Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Ex3_MusicFestival;\r\n\r\nimport com.sun.tools.javac.Main;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Ex3_Main {\r\n\r\n    public static void run(){\r\n\r\n        ArrayList<Event> allEvents = new ArrayList<>();\r\n        //MainStageEvents\r\n        allEvents.add(new MainStageEvent(\"Walk of the Earth\",\"Music\") );\r\n        allEvents.add(new MainStageEvent(\"M and M\",\"Music\") );\r\n        allEvents.add(new MainStageEvent(\"Taylor Slow\", \"Music\"));\r\n        allEvents.add(new MainStageEvent(\"Kanye East\", \"Music\"));\r\n        allEvents.add(new MainStageEvent(\"Kendrick Lame R\", \"Music\"));\r\n        //NonMusicEvents\r\n        allEvents.add(new NonMusicEvent(\"Curry Connection\", \"Food Truck\",\"Truck 9\"));\r\n        ((NonMusicEvent) allEvents.get(5)).setRent(50);\r\n        allEvents.add(new merchBooth(\"Tony's T-Shirts\", \"Merch\" , \"Tent 4\",5,100));\r\n        allEvents.add(new merchBooth(\"Pleasant Pants\",\"Merch\",\"Tent 19\",5,38));\r\n        allEvents.add(new merchBooth(\"Happy Hoodies\",\"Merch\",\"Tent 6\",9,99));\r\n        allEvents.add(new merchBooth(\"Tilted T-Shirts\",\"Merch\",\"Tent 5\",10,101));\r\n        allEvents.add(new merchBooth(\"Paradise Puffer Jackets\",\"Merch\",\"Tent 1\",7,87));\r\n        //SmallStageEvents\r\n        allEvents.add(new SmallStageEvent(\"Bottle Caps\",\"Music\",300,500));\r\n        allEvents.add(new SmallStageEvent(\"Kevin Fart\",\"Comedy\",600,700));\r\n        allEvents.add(new SmallStageEvent(\"Woodallica\",\"Music\",100,57));\r\n        allEvents.add(new SmallStageEvent(\"DC/AC\",\"Music\",320,510));\r\n        allEvents.add(new SmallStageEvent(\"Justin Beaver\",\"Music\",15,30));\r\n\r\n\r\n        ((MainStageEvent) allEvents.get(0)).addTech(\"Fireworks\");\r\n        ((MainStageEvent) allEvents.get(0)).addTech(\"Loud Speakers\");\r\n\r\n\r\n        while (true) {\r\n            System.out.println();\r\n            System.out.println(\"Choose from the following options.\");\r\n\r\n            System.out.println(\"1. Add new Event\");\r\n            System.out.println(\"2. Search For Events\");\r\n            System.out.println(\"3. Filter By Event Type\");\r\n            System.out.println(\"4. Print by type\");\r\n            System.out.println(\"5. Add Tech for Main Stage Events\");\r\n            System.out.println(\"6. exit.\");\r\n\r\n            int choice = Library.input.nextInt();\r\n            Library.input.nextLine();\r\n\r\n            if (choice == 1) {\r\n                System.out.println(\"Add new Event\");\r\n                System.out.println();\r\n                System.out.println(\"What type of Event would you like to add? (Ex. Main Stage, Small Stage, etc\");\r\n                String eventType = Library.input.nextLine();\r\n\r\n                if(eventType.contains(\"main\")){\r\n                    System.out.println(\"What kind of performance is happening?\");\r\n                    String kind = Library.input.nextLine();\r\n                    System.out.println(\"What is the arist's / performer's name?\");\r\n                    String name = Library.input.nextLine();\r\n                    allEvents.add(new MainStageEvent(name,kind));\r\n\r\n                }\r\n                if(eventType.contains(\"small\")){\r\n                    System.out.println(\"What kind of performance is happening?\");\r\n                    String kind = Library.input.nextLine();\r\n                    System.out.println(\"What is the arist's / performer's name?\");\r\n                    String name = Library.input.nextLine();\r\n                    System.out.println(\"What is the attendance capacity of this event?\");\r\n                    int cap = Library.input.nextInt();\r\n                    Library.input.nextLine();\r\n                    System.out.println(\"How many attendees are going to be at this event?\");\r\n                    int guests = Library.input.nextInt();\r\n                    Library.input.nextLine();\r\n                    allEvents.add(new SmallStageEvent(name,kind,cap,guests));\r\n\r\n                }\r\n                if(eventType.contains(\"merch\")){\r\n                    System.out.println(\"WHat is the name of this merchandise booth?\");\r\n                    String name = Library.input.nextLine();\r\n                    System.out.println(\"What tent number is this booth located?\");\r\n                    String loc = Library.input.nextLine();\r\n                    System.out.println(\"What is the percent commission this booth being charged?\");\r\n                    int com = Library.input.nextInt();\r\n                    Library.input.nextLine();\r\n                    System.out.println(\"How many items has this booth sold?\");\r\n                    int ns = Library.input.nextInt();\r\n                    Library.input.nextLine();\r\n                    System.out.println(\"How many items are being sold here?\");\r\n                    int numItems = Library.input.nextInt();\r\n                    Library.input.nextLine();\r\n\r\n                    allEvents.add(new merchBooth(name, \"merch\", loc, com, ns));\r\n\r\n                    int foundBooth = searchForEvent(allEvents, name);\r\n\r\n                    for (int i = 0; i <numItems ; i++) {\r\n                        System.out.println(\"What item would you like to sell?\");\r\n                        String newItem = Library.input.nextLine();\r\n                        ((merchBooth) allEvents.get(foundBooth)).addItems(newItem);\r\n                    }\r\n                }\r\n                if(eventType.contains(\"non\")){\r\n                    System.out.println(\"What is the name of this event?\");\r\n                    String name = Library.input.nextLine();\r\n                    System.out.println(\"What kind of station / event is this?\");\r\n                    String type = Library.input.nextLine();\r\n                    System.out.println(\"What is the location of this event?\");\r\n                    String loc = Library.input.nextLine();\r\n                    System.out.println(\"What is this station being charged for rent?\");\r\n                    int rent = Library.input.nextInt();\r\n                    Library.input.nextLine();\r\n\r\n                    allEvents.add(new NonMusicEvent(name,type,loc));\r\n                    int newNonMusic = searchForEvent(allEvents,name);\r\n\r\n                    ((NonMusicEvent) allEvents.get(newNonMusic)).setTime();\r\n                    ((NonMusicEvent) allEvents.get(newNonMusic)).setRent(rent);\r\n                }\r\n\r\n            } else if (choice == 2) {\r\n                System.out.println(\"Search for Events\");\r\n                System.out.println();\r\n                System.out.println(\"What Event (Performer / name) are you searching for?\");\r\n                String findEvent = Library.input.nextLine();\r\n                int eventIndex = searchForEvent(allEvents,findEvent);\r\n\r\n                if(eventIndex != -1){\r\n\r\n                    if(allEvents.get(eventIndex) instanceof MainStageEvent){\r\n                        ((MainStageEvent) allEvents.get(eventIndex)).PrintAllInfo();\r\n                    }\r\n                    if(allEvents.get(eventIndex) instanceof SmallStageEvent){\r\n                        ((SmallStageEvent) allEvents.get(eventIndex)).PrintAllInfo();\r\n\r\n                    }\r\n                    if(allEvents.get(eventIndex) instanceof merchBooth){\r\n                        ((merchBooth) allEvents.get(eventIndex)).PrintAllInfo();\r\n                    }\r\n                    if(allEvents.get(eventIndex) instanceof NonMusicEvent && !(allEvents.get(eventIndex) instanceof merchBooth)){\r\n                        ((NonMusicEvent) allEvents.get(eventIndex)).PrintAllInfo();\r\n                    }\r\n\r\n                }\r\n                else{\r\n                    System.out.println(\"Can't find event. Try again later.\");\r\n                }\r\n\r\n\r\n\r\n            } else if (choice == 3) {\r\n                System.out.println(\"Filter by Type\");\r\n                System.out.println(\"What kind of event would you like to see? (Main Stage, Small Stage, Food, Merchandise)\");\r\n                String eType = Library.input.nextLine();\r\n                for (int i = 0; i < allEvents.size(); i++) {\r\n                    if(eType.contains(\"main\")){\r\n                        if(allEvents.get(i) instanceof MainStageEvent){\r\n                            allEvents.get(i).PrintEvent();\r\n                        }\r\n                    }\r\n                    if(eType.contains(\"small\")){\r\n                        if(allEvents.get(i) instanceof SmallStageEvent){\r\n                            allEvents.get(i).PrintEvent();\r\n                        }\r\n                    }\r\n                    if(eType.contains(\"merch\")){\r\n                        if(allEvents.get(i) instanceof merchBooth){\r\n                            allEvents.get(i).PrintEvent();\r\n                        }\r\n                    }\r\n                    if(eType.contains(\"food\")){\r\n                        if(allEvents.get(i) instanceof NonMusicEvent && !(allEvents.get(i) instanceof merchBooth)){\r\n                            allEvents.get(i).PrintEvent();\r\n                        }\r\n                    }\r\n                }\r\n                //if()\r\n\r\n            } else if (choice == 4) {\r\n                System.out.println(\"Print events by type\");\r\n\r\n                for (int i = 0; i < allEvents.size(); i++) {\r\n                    if(allEvents.get(i) instanceof NonMusicEvent){\r\n                        ((NonMusicEvent) allEvents.get(i)).PrintAllInfo();\r\n                    }\r\n                }\r\n                for (int i = 0; i < allEvents.size(); i++) {\r\n                    if(allEvents.get(i) instanceof MainStageEvent){\r\n                        ((MainStageEvent) allEvents.get(i)).PrintAllInfo();\r\n                    }\r\n                }\r\n                for (int i = 0; i < allEvents.size(); i++) {\r\n                    if(allEvents.get(i) instanceof SmallStageEvent){\r\n                        ((SmallStageEvent) allEvents.get(i)).PrintAllInfo();\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }\r\n            else if (choice == 5) {\r\n                System.out.println(\"Add tech\");\r\n                System.out.println();\r\n                System.out.println(\"What performance do you want to add tech to?\");\r\n                String artistTech = Library.input.nextLine();\r\n                int artistIndex = searchForEvent(allEvents,artistTech);\r\n                if(artistIndex == -1){\r\n                    System.out.println(\"This performance can't be found. Try again later.\");\r\n                }\r\n                if(artistIndex != -1){\r\n                    if(allEvents.get(artistIndex) instanceof MainStageEvent){\r\n                        System.out.println(\"How many pieces of tech would you like to add?\");\r\n                        int techAdd = Library.input.nextInt();\r\n                        Library.input.nextLine();\r\n                        if(techAdd > 0){\r\n                            for (int i = 0; i < techAdd; i++) {\r\n                                System.out.println(\"What piece of tech would you like to add to this performance?\");\r\n                                String newTech = Library.input.nextLine();\r\n                                ((MainStageEvent) allEvents.get(artistIndex)).addTech(newTech);\r\n                            }\r\n\r\n                        }\r\n                        else{\r\n                            System.out.println(\"Invalid number of tech pieces.\");\r\n                        }\r\n                    }\r\n                    else{\r\n                        System.out.println(\"This is not a main stage event\");\r\n                    }\r\n                }// artistIndex != -1\r\n            }// choice 5\r\n            else if (choice == 6) {\r\n                break;\r\n            }// choice 6\r\n\r\n        } // while loop\r\n\r\n        System.out.println(\"Thank you. Please come again.\");\r\n\r\n    }//run\r\n\r\n\r\n    public static int searchForEvent (ArrayList<Event> list , String searchTerm){\r\n        for (int i = 0; i < list.size(); i++) {\r\n            if(searchTerm.equalsIgnoreCase(list.get(i).getEventName())){\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}//Main\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ex3_MusicFestival/Ex3_Main.java b/src/Ex3_MusicFestival/Ex3_Main.java
--- a/src/Ex3_MusicFestival/Ex3_Main.java	(revision ee27382deceeac244007599cf0747d35f9803ce2)
+++ b/src/Ex3_MusicFestival/Ex3_Main.java	(date 1737154100866)
@@ -1,7 +1,5 @@
 package Ex3_MusicFestival;
 
-import com.sun.tools.javac.Main;
-
 import java.util.ArrayList;
 
 public class Ex3_Main {
Index: src/Ex3_MusicFestival/merchBooth.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Ex3_MusicFestival;\r\n\r\nimport java.awt.font.LineBreakMeasurer;\r\nimport java.util.ArrayList;\r\n\r\nclass merchBooth extends NonMusicEvent{\r\n\r\n    private int commissionPct;\r\n    ArrayList<String> allItems;\r\n    private int numSales;\r\n\r\n    merchBooth (String name, String type, String loc,int com,int ns){\r\n        super(name, type, loc);\r\n        commissionPct = com;\r\n        numSales = ns;\r\n\r\n        allItems = new ArrayList<String>();\r\n    }\r\n\r\n\r\n    public void setRent(int r){\r\n        rent = rent + (rent * commissionPct);\r\n    }\r\n\r\n    public void addItems(String newItem) {\r\n        allItems.add(newItem);\r\n    }\r\n    public void PrintList(){\r\n        for (int i = 0; i < allItems.size(); i++) {\r\n            System.out.println(allItems.get(i));\r\n        }\r\n    }\r\n\r\n    public void PrintAllInfo(){\r\n        System.out.println(\"Name of Booth: \" + super.getEventName() + \"  Event Type: \" + super.getEventType() + \"  Event Location: \" + super.getLocation());\r\n        System.out.println(\"The items this booth is selling are:\");\r\n        PrintList();\r\n        System.out.println(\"The commission that this booth is being charge per purchase is: \" + commissionPct + \"%\");\r\n        System.out.println(\"The number of item this booth has sold is: \" + numSales);\r\n    }\r\n\r\n    }//class\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ex3_MusicFestival/merchBooth.java b/src/Ex3_MusicFestival/merchBooth.java
--- a/src/Ex3_MusicFestival/merchBooth.java	(revision ee27382deceeac244007599cf0747d35f9803ce2)
+++ b/src/Ex3_MusicFestival/merchBooth.java	(date 1737154009746)
@@ -1,6 +1,5 @@
 package Ex3_MusicFestival;
 
-import java.awt.font.LineBreakMeasurer;
 import java.util.ArrayList;
 
 class merchBooth extends NonMusicEvent{
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9ef10928-6d27-49ca-b29d-c789a155e87d\" name=\"Changes\" comment=\"Finished Folkfest?\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;ryanthorkelsson&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/ryanthorkelsson/Inheritance_RT.git&quot;,\r\n    &quot;accountId&quot;: &quot;19ecc85f-8b2a-4a25-af1e-f3fe1947e359&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2qrrQLbA9XwTR1qVikbdol2aOlo\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/ryant/IdeaProjects/Inheritance_RT\",\r\n    \"onboarding.tips.debug.path\": \"C:/Users/ryant/IdeaProjects/Inheritance_RT/src/Main.java\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"Inheritance_RT\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9ef10928-6d27-49ca-b29d-c789a155e87d\" name=\"Changes\" comment=\"\" />\r\n      <created>1735431520063</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1735431520063</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"At home test\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735432759665</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735432759665</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added the filter option\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735966247556</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735966247556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Finished Folkfest?\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1736136810949</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1736136810949</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"At home test\" />\r\n    <MESSAGE value=\"Added the filter option\" />\r\n    <MESSAGE value=\"Finished Folkfest?\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Finished Folkfest?\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ee27382deceeac244007599cf0747d35f9803ce2)
+++ b/.idea/workspace.xml	(date 1737154157073)
@@ -4,8 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9ef10928-6d27-49ca-b29d-c789a155e87d" name="Changes" comment="Finished Folkfest?">
+    <list default="true" id="9ef10928-6d27-49ca-b29d-c789a155e87d" name="Changes" comment="Finished Folkfest">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Ex3_MusicFestival/Ex3_Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Ex3_MusicFestival/Ex3_Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Ex3_MusicFestival/merchBooth.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Ex3_MusicFestival/merchBooth.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -36,18 +38,18 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Main.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "master",
-    "ignore.virus.scanning.warn.message": "true",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/ryant/IdeaProjects/Inheritance_RT",
-    "onboarding.tips.debug.path": "C:/Users/ryant/IdeaProjects/Inheritance_RT/src/Main.java"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/ryant/IdeaProjects/Inheritance_RT&quot;,
+    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/ryant/IdeaProjects/Inheritance_RT/src/Main.java&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Main" />
@@ -95,7 +97,15 @@
       <option name="project" value="LOCAL" />
       <updated>1736136810949</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="Finished Folkfest">
+      <option name="closed" value="true" />
+      <created>1736221079116</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1736221079117</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -125,6 +135,7 @@
     <MESSAGE value="At home test" />
     <MESSAGE value="Added the filter option" />
     <MESSAGE value="Finished Folkfest?" />
-    <option name="LAST_COMMIT_MESSAGE" value="Finished Folkfest?" />
+    <MESSAGE value="Finished Folkfest" />
+    <option name="LAST_COMMIT_MESSAGE" value="Finished Folkfest" />
   </component>
 </project>
\ No newline at end of file
